# axlap/docker-compose.yml
version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10 # Specific version for compatibility
    container_name: axlap-elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g" # Adjust based on system resources
      - xpack.security.enabled=false # Simplified for local deployment; for production, enable and configure
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./data/elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      # - ./config/elasticsearch/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties # Optional custom logging
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    networks:
      - axlap_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.10
    container_name: axlap-filebeat
    depends_on:
      elasticsearch:
        condition: service_healthy
    user: root # Filebeat needs root to access Docker logs or host log files
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./data/zeek_logs_raw:/var/log/zeek_json:ro # Mount Zeek JSON logs dir
      - /var/run/docker.sock:/var/run/docker.sock:ro # If monitoring container logs
      - ./data/suricata_logs:/var/log/suricata:ro # Mount Suricata EVE JSON logs
    command: filebeat -e -strict.perms=false # -strict.perms=false for when config is root-owned
    networks:
      - axlap_net
    restart: unless-stopped

  zeek:
    build:
      context: ./dockerfiles/zeek
    container_name: axlap-zeek
    privileged: true # Needed for promiscuous mode / PF_RING / AF_PACKET
    # Alternatively, use network_mode: host, but less isolated
    # Or add capabilities: [NET_ADMIN, NET_RAW, SYS_NICE]
    # For PF_RING, device mapping like /dev/pfring might be needed
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE # For ZeekControl priority
    volumes:
      - ./config/zeek:/usr/local/zeek/share/zeek/site # Site configuration
      - ./src/zeek_plugins:/opt/axlap/zeek_plugins # Custom plugins
      - ./data/zeek_logs_raw:/var/log/zeek_json # Output JSON logs here
      - ./data/arkime_pcap:/data/pcap # Directory for Zeek to write PCAPs for Arkime (if Zeek manages this)
      # - /sys/fs/bpf:/sys/fs/bpf # For eBPF/AF_XDP if used
    environment:
      - ZEEK_INTERFACE=${ZEEK_INTERFACE_FROM_ENV:-eth0} # This will be configured by install.sh
      - ZEEK_LOG_JSON=1 # Enable JSON logging by default
    command: /bin/bash -c "echo 'Starting Zeek... configuring interface and launching.' && /usr/local/zeek/bin/zeekctl deploy && tail -f /usr/local/zeek/spool/manager/current.log"
    # A more robust entrypoint script would handle zeekctl start/deploy and keep container alive
    networks:
      axlap_net: # For management/API if any; packet capture on host interface
        ipv4_address: 172.28.0.3 # Example static IP within Docker network
    network_mode: "host" # For Zeek to capture traffic directly on host interfaces. This simplifies setup.
                         # If not host mode, needs careful NET_ADMIN and interface forwarding.
    restart: unless-stopped

  suricata:
    build:
      context: ./dockerfiles/suricata
    container_name: axlap-suricata
    privileged: true # For promiscuous mode
    # cap_add:
    #   - NET_ADMIN
    #   - NET_RAW
    #   - SYS_NICE
    network_mode: "host" # Simplest way for Suricata to see host traffic
    volumes:
      - ./config/suricata:/etc/suricata
      - ./rules:/etc/suricata/rules # Custom rules + downloaded rules
      - ./data/suricata_logs:/var/log/suricata # EVE JSON logs and other Suricata logs
      - ./logs:/var/log/axlap_suricata_init # For init script logs
    environment:
      - SURICATA_INTERFACE=${SURICATA_INTERFACE_FROM_ENV:-eth0} # Configured by install.sh
    # Command will be in Dockerfile entrypoint to handle rule updates and suricata execution
    restart: unless-stopped

  arkime-viewer:
    build:
      context: ./dockerfiles/arkime
      dockerfile: Dockerfile.viewer
    container_name: axlap-arkime-viewer
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "127.0.0.1:8005:8005" # Arkime web UI
    volumes:
      - ./config/arkime/config.ini:/opt/arkime/etc/config.ini:ro
      - ./data/arkime_pcap:/data/pcap:ro # Read-only access to PCAPs
    environment:
      - ARKIME_ELASTICSEARCH=http://axlap-elasticsearch:9200
    networks:
      - axlap_net
    restart: unless-stopped

  arkime-capture: # Arkime also has a capture component, can run alongside Zeek or read its output
    build:
      context: ./dockerfiles/arkime
      dockerfile: Dockerfile.capture
    container_name: axlap-arkime-capture
    privileged: true # If capturing directly
    network_mode: "host" # If capturing directly
    # Or read from a shared pcap directory populated by Zeek or another tool
    # cap_add:
    #  - NET_ADMIN
    #  - NET_RAW
    volumes:
      - ./config/arkime/config.ini:/opt/arkime/etc/config.ini:ro
      - ./data/arkime_pcap:/data/pcap # Where PCAPs are stored/written
    environment:
      - ARKIME_ELASTICSEARCH=http://axlap-elasticsearch:9200
      - CAPTURE_INTERFACE=${CAPTURE_INTERFACE_FROM_ENV:-eth0} # Configured by install.sh; only if Arkime captures directly
    # Command depends on whether it captures live or watches a dir.
    # For this setup, Arkime will primarily be a PCAP *viewer* of Zeek-generated PCAPs,
    # or Zeek can call Arkime's offline pcap ingestion.
    # For simplicity, Arkime capture will monitor a directory where Zeek drops PCAPs.
    # The arkime capture service will be configured to watch a directory.
    command: /opt/arkime/bin/arkime_capture -c /opt/arkime/etc/config.ini --dir /data/pcap
    networks: # Needs to talk to ES
      - axlap_net
    restart: unless-stopped
    depends_on:
      - elasticsearch

  opencti:
    image: opencti/platform:5.12.19 # Use specific version
    container_name: axlap-opencti
    depends_on:
      - opencti-elasticsearch # OpenCTI needs its own ES or can share, but own is safer for versions
      - opencti-redis
      - opencti-s3
      - opencti-worker
      - opencti-connector-export-file-stix # Example connector
      - opencti-connector-import-file-stix # Example connector
    environment:
      - APP__PORT=8080
      - APP__BASE_URL=http://localhost:8080 # Adjust if exposing differently
      - APP__ADMIN__EMAIL=${OPENCTI_ADMIN_EMAIL:-admin@axlap.local}
      - APP__ADMIN__PASSWORD=${OPENCTI_ADMIN_PASSWORD:-ChangeMeAXLAP!123}
      - APP__ADMIN__TOKEN=${OPENCTI_ADMIN_TOKEN:-GenerateRandomOrFixed} # Must be generated
      - APP__APP_LOGS__LOGS_LEVEL=error
      - ELASTICSEARCH__URL=http://opencti-elasticsearch:9200
      - REDIS__HOSTNAME=opencti-redis
      - REDIS__PORT=6379
      - MINIO__ENDPOINT=opencti-s3
      - MINIO__PORT=9000
      - MINIO__USE_SSL=false
      - MINIO__ACCESS_KEY=${MINIO_ROOT_USER:-axlap_minio_user}
      - MINIO__SECRET_KEY=${MINIO_ROOT_PASSWORD:-ChangeMeAXLAP!minio}
      - SMTP__HOSTNAME=${SMTP_HOSTNAME:-""} # Disable email by default
      - PROVIDERS__LOCAL__STRATEGY=LocalStrategy
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - axlap_net
    restart: unless-stopped

  opencti-worker:
    image: opencti/worker:5.12.19
    container_name: axlap-opencti-worker
    depends_on:
      - opencti-redis
      - opencti-s3
      - opencti-elasticsearch
    environment:
      - OPENCTI_URL=http://opencti:8080
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN:-GenerateRandomOrFixed} # Use the same token as platform
      - WORKER_LOG_LEVEL=error
    networks:
      - axlap_net
    restart: unless-stopped

  # OpenCTI Dependencies (Postgres, Redis, MinIO, own ES)
  # These are often bundled in OpenCTI's own docker-compose.
  # For simplicity, using separate ES for OpenCTI to avoid version conflicts with main ES.
  opencti-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9 # OpenCTI specific ES version
    container_name: axlap-opencti-es
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits: { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65536, hard: 65536 } }
    volumes:
      - ./data/opencti_data/es_octi:/usr/share/elasticsearch/data
    networks:
      - axlap_net
    restart: unless-stopped

  opencti-redis:
    image: redis:7.0.5-alpine
    container_name: axlap-opencti-redis
    volumes:
      - ./data/opencti_data/redis:/data
    networks:
      - axlap_net
    restart: unless-stopped

  opencti-s3: # MinIO for S3 compatible storage
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: axlap-opencti-s3
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-axlap_minio_user}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-ChangeMeAXLAP!minio}
    ports:
      - "127.0.0.1:9001:9001" # MinIO Console
      - "127.0.0.1:9000:9000" # MinIO API
    volumes:
      - ./data/opencti_data/s3:/data
    command: server /data --console-address ":9001"
    networks:
      - axlap_net
    restart: unless-stopped

  # Example OpenCTI Connectors (can add more as needed, e.g., MISP)
  opencti-connector-export-file-stix:
    image: opencti/connector-export-file-stix:5.12.19
    container_name: axlap-octi-conn-export-stix
    environment:
      - OPENCTI_URL=http://opencti:8080
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN:-GenerateRandomOrFixed}
      - CONNECTOR_ID=${CONNECTOR_EXPORT_FILE_STIX_ID:-GenerateRandomUUID} # Generate
      - CONNECTOR_TYPE=EXPORT_FILE_STIX
      - CONNECTOR_NAME=ExportFileStix
      - CONNECTOR_SCOPE=application/json # Mimetypes
      - CONNECTOR_CONFIDENCE_LEVEL=100
      - CONNECTOR_LOG_LEVEL=error
    depends_on: [opencti]
    networks: [axlap_net]
    restart: unless-stopped

  opencti-connector-import-file-stix:
    image: opencti/connector-import-file-stix:5.12.19
    container_name: axlap-octi-conn-import-stix
    environment:
      - OPENCTI_URL=http://opencti:8080
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN:-GenerateRandomOrFixed}
      - CONNECTOR_ID=${CONNECTOR_IMPORT_FILE_STIX_ID:-GenerateRandomUUID} # Generate
      - CONNECTOR_TYPE=IMPORT_FILE_STIX
      - CONNECTOR_NAME=ImportFileStix
      - CONNECTOR_VALIDATE_BEFORE_IMPORT=true
      - CONNECTOR_SCOPE=application/json,text/xml # Mimetypes
      - CONNECTOR_AUTO=false # Manual uploads only
      - CONNECTOR_CONFIDENCE_LEVEL=75
      - CONNECTOR_LOG_LEVEL=error
    depends_on: [opencti]
    networks: [axlap_net]
    restart: unless-stopped

  # MISP Connector for OpenCTI (Feature 7)
  opencti-connector-misp:
    image: opencti/connector-misp:5.12.19
    container_name: axlap-octi-conn-misp
    environment:
      - OPENCTI_URL=http://opencti:8080
      - OPENCTI_TOKEN=${OPENCTI_ADMIN_TOKEN} # Must be set
      - CONNECTOR_ID=${CONNECTOR_MISP_ID} # Must be generated
      - CONNECTOR_TYPE=EXTERNAL_IMPORT
      - CONNECTOR_NAME=MISP
      - CONNECTOR_SCOPE=misp # Mime type for MISP
      - CONNECTOR_CONFIDENCE_LEVEL=75 # Default confidence level
      - CONNECTOR_UPDATE_EXISTING_DATA=true
      - CONNECTOR_LOG_LEVEL=info
      - MISP_URL=${MISP_URL:-http://localhost:8888} # URL to your MISP instance (can be another container or external)
      - MISP_KEY=${MISP_KEY:-YourMispApiKey} # API Key for MISP
      - MISP_SSL_VERIFY=False # Set to True if MISP uses valid SSL
      - MISP_CREATE_REPORTS=True # Create reports in OpenCTI from MISP events
      - MISP_REPORT_CLASS="MISP Event" # Class for reports created from MISP events
      - MISP_IMPORT_FROM_DATE="2020-01-01" # Import MISP events from this date
      - MISP_IMPORT_TAGS="" # Comma-separated list of tags to import (empty for all)
      - MISP_INTERVAL_SEC=3600 # Interval to poll MISP (1 hour)
    depends_on: [opencti]
    networks: [axlap_net]
    restart: unless-stopped

  # ML Engine (runs periodically or on demand, not a long-running service for now)
  # This could be a container that's run by `docker-compose run ml_engine train` or `predict`
  # Or a small Flask API if real-time predictions are needed without direct ES polling
  # For now, it's script-based. A placeholder for its Dockerfile:
  ml_engine:
    build:
      context: ./dockerfiles/ml_engine
    container_name: axlap-ml-engine
    volumes:
      - ./src/ml_engine:/app/ml_engine
      - ./data/ml_models_data:/app/ml_engine/models # Persist models
      - ./logs:/app/logs # For ML logs
    environment:
      - ELASTICSEARCH_HOST=axlap-elasticsearch
      - ELASTICSEARCH_PORT=9200
    networks:
      - axlap_net
    # No command, run manually: docker-compose run --rm ml_engine python /app/ml_engine/train.py

networks:
  axlap_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16 # Define a subnet for AXLAP services
          # This is optional; Docker will assign IPs if not specified.
          # Use this if you want to control IPs for services or avoid conflicts.
